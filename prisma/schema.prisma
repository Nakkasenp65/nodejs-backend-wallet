
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum GoalStatus {
  ACTIVE    
  COMPLETED 
  CANCELLED 
}

enum Choice {
  DAILY 
  WEEKLY
  HALF_MONTH 
  MONTHLY 
}

model Notification {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId

  title     String            
  body      String?           
  type      NotificationType  
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId

  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  transactionId String?      @db.ObjectId

  createdAt DateTime @default(now())
}

enum NotificationType {
  RECEIVE
  SENT
  REWARD
  SYSTEM
}

model User {
  id        String  @id @map("_id") @default(auto()) @db.ObjectId
  userId    String  @unique
  username  String
  firstTime Boolean @default(true)
  occupation String?
  ageRange String?
  userProfilePicUrl String?
  monthlyPayment Float

  goal Goal?
  wallet Wallet?
  notifications     Notification[] 
  userMissions      UserMission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Wallet {
  id       String   @id @map("_id") @default(auto()) @db.ObjectId
  balance  Float    @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id            String          @id @map("_id") @default(auto()) @db.ObjectId
  name          String
  amount        Float?
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  from          String
  to            String
  description   String?
  slipImageUrl  String
  bank          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt


  verified      Boolean         @default(false)
  verifiedAmount Float?
  
  wallet        Wallet?          @relation(fields: [walletId], references: [id], onDelete: SetNull)
  walletId      String?          @db.ObjectId 

  notifications Notification[]
  userMission   UserMission?

  @@index([walletId, status, createdAt(sort: Desc)])
}

enum TransactionType {
  OUTCOME
  INCOME
  REWARD
}

enum TransactionStatus {
  PENDING
  SUCCESS
  CANCELLED
  REJECTED
}

model Mission {
  id              String        @id @map("_id") @default(auto()) @db.ObjectId
  title           String
  description     String
  rewardAmount    Float
  webExpiresAt    DateTime // Expiration date for the mission on the website
  enrolledBy      UserMission[] // Relation to users who have enrolled
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model UserMission {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @db.ObjectId

  mission   Mission? @relation(fields: [missionId], references: [id], onDelete: SetNull)
  missionId String?  @db.ObjectId

  status          UserMissionStatus @default(ENROLLED)
  enrolledAt      DateTime          @default(now())
  userExpiresAt   DateTime 
  completedAt     DateTime?
  rewardTransaction   Transaction? @relation(fields: [rewardTransactionId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  rewardTransactionId String?      @unique @db.ObjectId 

  @@unique([userId, missionId]) 
}

enum UserMissionStatus {
  ENROLLED
  COMPLETED
  EXPIRED
}

model Goal {
  id     String     @id @map("_id") @default(auto()) @db.ObjectId
  status GoalStatus @default(ACTIVE)

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @unique @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id String @id @map("_id") @default(auto()) @db.ObjectId
  name Choice
  displayName String
  goal Goal?
}

model Brand {
  id        String        @id @map("_id") @default(auto()) @db.ObjectId
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Product {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  uniqueId String @unique

  brand    String
  model    String
  capacity String
  color    String
  price    Int
  imageUrl String

  downPaymentAmount   Int
  downPaymentPercent  Int
  installment6Months  Int
  installment10Months Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  targetedByGoals Goal[]
}

model SlipDecoded {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  decodedContent String
  createdAt DateTime @default(now())
}


